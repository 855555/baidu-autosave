name: Docker Build and Push

on:
  workflow_dispatch:
    inputs:
      version:
        description: '镜像版本号 (例如: v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      push_to_registry:
        description: '是否推送到 Docker Hub'
        required: true
        type: boolean
        default: true
      update_latest:
        description: '是否同时更新latest标签'
        required: true
        type: boolean
        default: true
  push:
    branches: [ main, master ]
    paths:
      - 'static/main.js'

env:
  REGISTRY: docker.io
  # 格式: docker.io/用户名/仓库名
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/baidu-autosave
  VERSION: ${{ inputs.version }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check-version.outputs.should_build }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Extract version from main.js
        id: get-version
        run: |
          VERSION=$(grep -m 1 "APP_VERSION = " static/main.js | sed -E "s/.*APP_VERSION = '(.*)'.*/\1/")
          echo "Version from main.js: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if version changed
        id: check-version
        run: |
          git fetch origin
          PREVIOUS_VERSION=$(git show HEAD~1:static/main.js | grep -m 1 "APP_VERSION = " | sed -E "s/.*APP_VERSION = '(.*)'.*/\1/")
          CURRENT_VERSION=$(grep -m 1 "APP_VERSION = " static/main.js | sed -E "s/.*APP_VERSION = '(.*)'.*/\1/")
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$PREVIOUS_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "No version change detected"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
  
  build:
    runs-on: ubuntu-latest
    needs: check-version
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && needs.check-version.outputs.should_build == 'true')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set version variable
        id: set-version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "VERSION=${{ needs.check-version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          fi
          echo "Using version: ${{ env.VERSION }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'workflow_dispatch' && inputs.push_to_registry || github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ github.event_name == 'workflow_dispatch' && inputs.update_latest || github.event_name == 'push' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'workflow_dispatch' && inputs.push_to_registry || github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create Release
        if: github.event_name == 'push' && needs.check-version.outputs.should_build == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }} 